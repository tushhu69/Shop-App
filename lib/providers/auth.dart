//import 'dart:html';
import 'dart:async';
import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/http_exception.dart';
import 'package:shared_preferences/shared_preferences.dart';

class Auth with ChangeNotifier {
  String _token;
  DateTime _expiryDate;
  String _userId;
  Timer _authTimer;
  bool get isAuth {
    return token != null;
  }

  String get userId {
    return _userId;
  }

  String get token {
    if (_expiryDate != null &&
        _expiryDate.isAfter(DateTime.now()) &&
        _token != null) {
      return _token;
    }
    return null;
  }

  Future<void> _authentication(
      String email, String password, String keysegement) async {
    final url = Uri.parse(
        'https://identitytoolkit.googleapis.com/v1/accounts:$keysegement?key=AIzaSyAzTRUdt4cR-cpHaluhSmaor23f3Ea2fUw');
    try {
      final response = await http.post(
        url,
        body: json.encode(
          {
            'email': email,
            'password': password,
            'returnSecureToken': true,
          },
        ),
      );
      // print(json.decode(response.body));
      final responsedata = json.decode(response.body);
      if (responsedata['error'] != null) {
        throw HttpException(responsedata['error']['message']);
      }
      _token = responsedata['idToken'];
      _userId = responsedata['localId'];
      _expiryDate = DateTime.now().add(
        Duration(
          seconds: int.parse(responsedata['expiresIn']),
        ),
      );
      autologout();
      // print(_expiryDate);
      // print(_token);
      notifyListeners();
      final prefs = await SharedPreferences.getInstance();
      final prefdata = json.encode({
        'token': _token,
        'userId': _userId,
        'expiryDate': _expiryDate.toIso8601String(),
      });
      prefs.setString('userdata', prefdata);
    } catch (error) {
      throw error;
    }
  }

  Future<void> signup(String email, String password) async {
    return _authentication(email, password, 'signUp');
  }

//here we return ther authn.. function because the autogenerated return of async will not wait , so the return future of
//_authentication is the return of post request
  Future<void> login(String email, String password) async {
    return _authentication(email, password, 'signInWithPassword');
  }

  void logout() async {
    _token = null;
    _userId = null;
    _expiryDate = null;
    if (_authTimer != null) {
      _authTimer.cancel();
      _authTimer = null;
    }

    notifyListeners();
    final prefs = await SharedPreferences.getInstance();
    // prefs.remove('userdata');//only clears the dtat associated with the key
    prefs.clear(); //clears all the datat stored
  }

  Future<bool> tryautologin() async {
    final prefs = await SharedPreferences.getInstance();
    if (!prefs.containsKey('userdata')) {
      return false;
    }
    final extracteddata =
        json.decode(prefs.getString('userdata')) as Map<String, Object>;
    final expirydate = DateTime.parse(extracteddata['expiryDate']);
    if (expirydate.isBefore(DateTime.now())) {
      return false;
    }
    _token = extracteddata['token'];
    _userId = extracteddata['userId'];
    _expiryDate = expirydate;
    notifyListeners();
    autologout();
    return true;
  }

  void autologout() {
    if (_authTimer != null) {
      _authTimer.cancel();
    }
    final _timeleftexpiry = _expiryDate.difference(DateTime.now()).inSeconds;
    _authTimer = Timer(Duration(seconds: _timeleftexpiry), logout);
  }
}
